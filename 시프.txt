1. malloc()함수를 이용하여 calloc() 함수를 구현하시오
#include<stdlib.h>
#include<stdio.h>

void calloc(size_t n, size_t size);
크기가 size인 메모리 공간을 n개 할당한다.  값을 모두 0으로 초기화하고 실패하면 NULL을 반환

void malloc(size_t size);
size 바이트 만큼의 메모리공간을 할당하며 그 시작주소를 void* 형으로 반환한다

 int *p, *q;
p = malloc(10*sizeof(int));
if(p == NULL) perror("malloc");

q = calloc(10, sizeof(int));
if(p == NULL) perror("calloc");

2. 프로세스 이미지와 자동 변수, 정적 변수, 동적 변수를 위한 메모리 할당에 대해서 설명하시오

코드
데이터
힙
----
->

<-
----
스택
U-영역

프로그램을 실행하기 위한 텍스트, 데이터,힙,스택등의 영역들을 위한 메모리를 할당해야된다
이러한 메모리 배치를 프로세스 이미지라고한다

프로그램을 실행하기 위한 텍스트(코드),데이터,힙,스택등의 영역들을 위한 메모리를 할당해야한다
이러한 메모리 배치를 프로세스 이미지라고 한다.




텍스트 - 프로세스가 실행하는 실행코드를 저장하는 영역이다.
데이터 - 전역 변수 및 정적 변수를 위한 메모리 영역이다.
힙 - 동적 메모리 할당을 위한 영역이다. C언어의 malloc 함수를 호출하면 이 영역에서 동적으로
메모리를 할당해준다.(동적변수)
스택 - 함수 호출을 구현하기 위한 실행시간 스택을 위한 영역으로 활성 레코드가 저장된다. (자동변수)
U - 영역 - 열린 파일 디스크립터, 현재 작업 디렉터리 등과 같은 프로세스의 정보를 저장하는 영역이다.

4. fork()(& wait)와 exec() 시스템 호출에 대해 예와 함께 차이점을 기술하시오

fork() 시스템 호출 - 부모 프로세스를 똑같이 복제하여 새로운 자식 프로세스를 생성. (자기복제)
fork()는 한 번 호출되면 두 번 리턴한다.
   자식 프로세스에게는 0을 리턴하고
   부모 프로세스에게는 자식 프로세스 ID를 리턴한다.
   부모 프로세스와 자식 프로세스는 병행적으로 각각 실행을 계속한다.

프로세스 기다리기: wait()
자식 프로세스 중의 하나가 끝날 때까지 기다린다.
끝난 자식 프로세스의 종료 코드가 status에 저장되며
끝난 자식 프로세스의 번호를 리턴한다.

<forkwait.c>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
pid_t wait(int *status);
pid_t fork(void);

/*부모 프로세스가 자식 프로세스를 생성하고 끝나기를 기다린다. */
int main()
{
   int pid, child, status;
   printf("[%d] 부모 프로세스 시작 \n", getpid());
   pid = fork();
   if (pid == 0) {
      printf("[%d] 자식 프로세스 시작 \n", getpid());
      exit(1);
   }
   child = wait(&status); // 자식 프로세스가 끝나기를 기다린다.
   printf("[%d] 자식 프로세스 %d 종료 \n", getpid(), child);
   printf("\t종료 코드 %d\n", status>>8);
}




<execute1.c>
#include <unistd.h>
#include <stdio.h>
#include<stdlib.h>

/* 자식 프로세스를 생성하여 echo 명령어를 실행한다. */
int main()
{
   printf("부모 프로세스 시작\n");
   if (fork() == 0) {
      execl("/bin/echo", "echo", "hello", NULL);
      fprintf(stderr, "첫 번째 실패");
      exit(1);
   }
   printf("부모 프로세스 끝 \n");
}

fork() 시스템 호출은 새로운 프로세스를 위한 메모리를 할당하지만
exec()는 호출한 프로세스가 아닌 exec()에 의해 호출된 프로세스만 메모리에 남겨둔다.

5. 시스템 부팅에 대해 기술하시오

swapper(스케줄러 프로세스)
커널 내부에서 만들어진 프로세스로 프로세스 스케줄링을 한다
init(초기화 프로세스) 
/etc/inittab 파일에 기술된 대로 시스템을 초기화
getty 프로세스
로그인 프롬프트를 내고 키보드 입력을 감지한다.
login 프로세스
사용자의 로그인 아이디 및 패스워드를 검사
shell 프로세스
시작 파일을 실행한 후에 쉘 프롬프트를 내고 사용자로부터 명령어를 기다린다

6. 시그널과 비지역 점프에 대해 예와 함께 기술 하시오
시그널은 예기치 않은 사건이 발생할 때 이를 알리는 소프트웨어 인터럽트이다.

임의의 위치로 비지역 점프 
오류/예외 처리, 시그널 처리 등에 유용함

#include <stdio.h>
#include <stdlib.h>
#include <setjmp.h>
#include <signal.h>
void p1();
void intHandler();
jmp_buf env;

int main() 
{
    signal(SIGINT, intHandler);
    if (setjmp(env) != 0) {
         printf("인터립트로 인해 복귀\n");
         exit(0);
    }
    else printf("처음 통과\n");
    p1(); 
} 
void p1()
{ 
    while (1) {
        printf("루프\n");
        sleep(1);
    }
}
	
void intHandler() 
{
	
    printf("인터럽트\n");
    longjmp(env, 1);
}




7. 시스템 호출이란?
운영 체제의 커널이 제공하는 서비스에 대해, 응용 프로그램의 요청에 따라 커널에 접근하기 위한 인터페이스이다